name: CI
on:
  pull_request:
  push:
    branches:
      - main  # update to match the default branch for your repo

# Cancel active CI runs for a PR before starting another run
concurrency:
  group: ${{ github.workflow}}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  FORCE_COLOR: "1"

defaults:
  run:
    shell: bash

jobs:
  ci:
    name: Test and Package
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        target: [ "Windows", "macOS", "Ubuntu-24.04", "Fedora-40", "Flatpak", "iOS", "Android"]
        include:
          - target: "Windows"
            output-format: "app"
            runs-on: "windows-latest"

          - target: "macOS"
            output-format: "app"
            runs-on: "macos-latest"

          - target: "Ubuntu-24.04"
            platform: "Linux"
            output-format: "system"
            runs-on: "ubuntu-latest"
            briefcase-run-prefix: "sudo apt -y install socat && xvfb-run"
            briefcase-args: "--target ubuntu:24.04"

          - target: "Fedora-40"
            platform: "Linux"
            output-format: "system"
            runs-on: "ubuntu-latest"
            briefcase-run-prefix: "sudo apt -y install socat && xvfb-run"
            briefcase-args: "--target fedora:40"

          - target: "Flatpak"
            platform: "Linux"
            output-format: "Flatpak"
            runs-on: "ubuntu-latest"
            pre-command: "sudo apt update && sudo apt -y install flatpak flatpak-builder"
            briefcase-run-prefix: "xvfb-run"

          - target: "iOS"
            output-format: "Xcode"
            runs-on: "macos-latest"
            briefcase-run-args: "--device 'iPhone SE (3rd generation)'"

          - target: "Android"
            output-format: "Gradle"
            runs-on: "ubuntu-latest"
            # Enable KVM permissions for the emulator and use GitHub's preinstalled JDK
            briefcase-run-prefix: >-
              echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
              && sudo udevadm control --reload-rules
              && sudo udevadm trigger --name-match=kvm
              && JAVA_HOME="${JAVA_HOME_17_X64}"
            briefcase-run-args: >-
              --device '{"avd":"beePhone"}'
              --Xemulator=-no-window
              --Xemulator=-no-snapshot
              --Xemulator=-no-audio
              --Xemulator=-no-boot-anim
              --shutdown-on-exit

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Briefcase
        run: |
          python -m pip install -U pip setuptools wheel
          python -m pip install briefcase

      - name: Setup Environment
        if: matrix.pre-command
        run: ${{ matrix.pre-command }}

      - name: Build App
        run: |
          ${{ matrix.briefcase-build-prefix }} \
          briefcase build \
            ${{ matrix.platform || matrix.target }} \
            ${{ matrix.output-format }} \
            --test --no-input \
            ${{ matrix.briefcase-args }} \
            ${{ matrix.briefcase-build-args }}

      - name: Test App
        run: |
          ${{ matrix.briefcase-run-prefix }} \
          briefcase run \
            ${{ matrix.platform || matrix.target }} \
            ${{ matrix.output-format }} \
            --test --no-input \
            ${{ matrix.briefcase-args }} \
            ${{ matrix.briefcase-run-args }}

      - name: Package App
        run: |
          ${{ matrix.briefcase-package-prefix }} \
          briefcase package \
            ${{ matrix.platform || matrix.target }} \
            ${{ matrix.output-format }} \
            --update --adhoc-sign --no-input \
            ${{ matrix.briefcase-args }} \
            ${{ matrix.briefcase-package-args }}

      - name: Upload App
        # Briefcase cannot create iOS artefacts; instead, apps
        # must be packaged for iOS directly within Xcode.
        if: matrix.target != 'iOS'
        uses: actions/upload-artifact@v4
        with:
          name: App-${{ matrix.target }}
          path: dist
          if-no-files-found: error

      - name: Upload Log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: log-${{ matrix.target }}
          path: logs/*
